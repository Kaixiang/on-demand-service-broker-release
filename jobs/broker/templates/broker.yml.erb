# Copyright (C) 2016-Present Pivotal Software, Inc. All rights reserved.
# This program and the accompanying materials are made available under the terms of the under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.

<%
required_catalog_keys = ["id", "service_name", "service_description", "bindable", "plan_updatable", "plans"]
required_plan_keys = ['name', 'plan_id', 'description', 'instance_groups']
required_instance_group_keys = ['name', "vm_type", "instances", "networks", "azs"]
valid_cf_service_access_values = ['enable', 'disable', 'manual']

def validate_config(hash, keys, message)
  keys.each do |key|
    val = hash[key]
    raise message+key if val.nil?
    if [Array, String].include? val.class
      raise message+key if val.empty?
    end
  end
end

def has_values?(field)
  p(field).values.any?
end

def any_fields_set?(hash)
  hash.any? { |_, v| !v.nil? }
end

def validate_releases(service_deployment)
  if service_deployment['releases'].nil?
    raise "Invalid service_deployment config - must specify releases"
  end

  if service_deployment['releases'].empty?
    raise "Invalid service_deployment config - must specify at least one release"
  end

  required_release_keys = ['name', 'version', 'jobs']

  service_deployment['releases'].each do |r|
    validate_config(r, required_release_keys, "Invalid service_deployment.releases config - must specify ")

    if r['version'] =~ /latest$/
      raise "You must configure the exact release and stemcell versions in broker.service_deployment. " +
        "ODB requires exact versions to detect pending changes as part of the 'cf update-service' workflow. For example, latest and 3112.latest are not supported."
    end
  end
end

def validate_stemcell(service_deployment)
  required_stemcell_keys = %w{os version}
  validate_config(service_deployment['stemcell'], required_stemcell_keys, "Invalid service_deployment.stemcell config - must specify ")
  if service_deployment['stemcell']['version'] =~ /latest$/
    raise "You must configure the exact release and stemcell versions in broker.service_deployment. " +
      "ODB requires exact versions to detect pending changes as part of the 'cf update-service' workflow. For example, latest and 3112.latest are not supported."
  end
end

def credhub_link_valid?(credhub_link)
  ['internal_url', 'ca_certificate', 'port'].each do |v|
    if credhub_link.p("credhub.#{v}") == ''
      return false
    end
  end

  return true
end

def credhub_config
  credhub_properties = {}

  if p('secure_binding_credentials.enabled')
    if_link('credhub') do |credhub|
      raise "Secure service binding is enabled but CredHub link is empty" unless credhub_link_valid?(credhub)

      credhub_properties = {
        'credhub' => {
          'api_url' => "https://#{credhub.p('credhub.internal_url')}:#{credhub.p('credhub.port')}",
          'ca_cert' => credhub.p('credhub.ca_certificate'),
          'client_id' => p('secure_binding_credentials.authentication.uaa.client_id'),
          'client_secret' => p('secure_binding_credentials.authentication.uaa.client_secret'),
          'internal_uaa_ca_cert' => p('secure_binding_credentials.authentication.uaa.ca_cert'),
        }
      }
    end.else do
      raise "secure_binding_credentials is enabled, but no CredHub link was provided"
    end
  end

  credhub_properties
end

if has_values?('secure_binding_credentials.authentication.uaa')
  validate_config(p('secure_binding_credentials.authentication.uaa'), ['client_id', 'client_secret'], 'Invalid secure_binding_credentials config - must specify ')
end

service_catalog = p('service_catalog')
plans = service_catalog['plans'] || []
plans.delete_if { |plan| plan.nil? }

validate_config(service_catalog, required_catalog_keys, "Invalid service_catalog config - must specify ")

if !any_fields_set?(p('bosh.authentication.basic')) && !any_fields_set?(p('bosh.authentication.uaa'))
  raise 'Invalid bosh config - must specify authentication'
end

if any_fields_set?(p('bosh.authentication.basic')) && any_fields_set?(p('bosh.authentication.uaa'))
  raise 'Invalid bosh config - must only specify one type of authentication'
end

service_deployment = p('service_deployment')
validate_releases(service_deployment)
validate_stemcell(service_deployment)

if p('disable_cf_startup_checks')
  global_limit = service_catalog.dig('global_quotas', 'service_instance_limit')
  if global_limit != nil && global_limit > 0
    raise 'Invalid quota configuration - global service instance limit requires CF to be configured'
  end

  global_resource_limit = service_catalog.dig('global_quotas', 'resource_limits')
  if global_resource_limit && any_fields_set?(global_resource_limit)
    raise 'Invalid quota configuration - global resource limits require CF to be configured'
  end
end

plans.each do |plan|
  validate_config(plan, required_plan_keys, "Invalid plan config - must specify ")

  plan['instance_groups'].each do |instance_group|
    validate_config(instance_group, required_instance_group_keys, "Invalid instance group config - must specify ")
  end

  if plan.has_key?('cf_service_access') && !valid_cf_service_access_values.include?(plan.fetch('cf_service_access'))
    raise "Unsupported value '#{plan.fetch('cf_service_access')}' for cf_service_access. Choose from \"enable\", \"disable\", \"manual\""
  end

  pre_delete = plan['lifecycle_errands'].to_h['pre_delete']
  if pre_delete != nil && pre_delete.class == Hash
    raise "Plan property lifecycle_errands.pre_delete must be an array."
  end

  post_deploy = plan['lifecycle_errands'].to_h['post_deploy']
  if post_deploy != nil && post_deploy.class == Hash
    raise "Plan property lifecycle_errands.post_deploy must be an array."
  end

  if p('disable_cf_startup_checks')
    plan_limit = plan.dig('quotas', 'service_instance_limit')
    if plan_limit != nil && plan_limit > 0
      raise 'Invalid quota configuration - plan service instance limit requires CF to be configured'
    end

    plan_resource_limit = plan.dig('quotas', 'resource_limits')
    if plan_resource_limit && any_fields_set?(plan_resource_limit)
      raise 'Invalid quota configuration - plan resource limit requires CF to be configured'
    end
  end
end

if has_values?("cf.authentication.client_credentials") && has_values?("cf.authentication.user_credentials")
  raise "Invalid CF authentication config - must specify either client or user credentials"
end

def normalise_bosh_authentication(bosh)
  uaa_config = bosh['authentication']['uaa']
  uaa_config['client_credentials'] = {
    'client_id' => uaa_config['client_id'],
    'client_secret' => uaa_config['client_secret'],
  }
  uaa_config.delete('client_id')
  uaa_config.delete('client_secret')
end

def bosh_config
  bosh = p('bosh')
  normalise_bosh_authentication(bosh)
  bosh
end

def cf_config
  cf = p('cf')
  cf_auth = cf['authentication']
  client_credentials = cf_auth['client_credentials']
  cf_auth['uaa'] = {
    'url' => cf_auth['url'],
    'client_credentials' => {
      'client_id' => client_credentials['client_id'],
      'client_secret' => client_credentials['secret']
    },
    'user_credentials' => cf_auth['user_credentials']
  }
  cf_auth.delete('url')
  cf_auth.delete('client_credentials')
  cf_auth.delete('user_credentials')
  cf
end

config = {
  "broker" => {
    "port" => p('port'),
    "username" => p('username'),
    "password" => p('password'),
    "disable_ssl_cert_verification" => p('disable_ssl_cert_verification'),
    "disable_cf_startup_checks" => p('disable_cf_startup_checks'),
    "startup_banner" => p('startup_banner'),
    "shutdown_timeout_in_seconds" => p('shutdown_timeout_in_seconds'),
    "expose_operational_errors" => p('expose_operational_errors'),
    "enable_plan_schemas" => p('enable_plan_schemas')
  },
  "bosh" => bosh_config,
  "cf" => cf_config,
  "service_adapter" => p('service_adapter'),
  "service_deployment" => p('service_deployment'),
  "service_catalog" => service_catalog
}.merge(credhub_config)
%>

<%= config.to_yaml %>
